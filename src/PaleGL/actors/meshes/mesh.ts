import { Actor, ActorArgs, createActor } from '@/PaleGL/actors/actor.ts';
import {ActorTypes, MeshType, MeshTypes} from '@/PaleGL/constants.ts';
import { Material } from '@/PaleGL/materials/material.ts';
import { Geometry } from '@/PaleGL/geometries/geometry.ts';

export type MeshOptionsArgs = {
    castShadow?: boolean;
    // instanced?: boolean;
    autoGenerateDepthMaterial?: boolean;
    renderEnabled?: boolean;
};

export type MeshArgs = ActorArgs & {
    // required
    geometry: Geometry;
    meshType?: MeshType;
    // optional
    material?: Material;
    // type?: ActorType;
    materials?: Material[];
    depthMaterial?: Material;
    depthMaterials?: Material[];
    // type?: ActorTypes,
} & MeshOptionsArgs;

export type Mesh = Actor & {
    meshType: MeshType;
    geometry: Geometry;
    materials: Material[];
    depthMaterials: Material[];
    castShadow: boolean;
    // instanced: boolean;
    autoGenerateDepthMaterial: boolean;
    renderEnabled: boolean;
};

export function createMesh({
    name,
    meshType,
    geometry,
    material,
    materials = [],
    depthMaterial,
    depthMaterials = [],
    type,
    castShadow = false,
    // instanced = false,
    autoGenerateDepthMaterial = true,
    renderEnabled = true,
}: MeshArgs): Mesh {
    // const actor = createActor({ name, type: type !== undefined ? type : ActorTypes.Mesh });
    const actor = createActor({ name, type: type !== undefined ? type : ActorTypes.Mesh });

    // TODO: check material is array
    materials = material ? [material] : materials ? materials : [];
    depthMaterials = depthMaterial ? [depthMaterial] : depthMaterials ? depthMaterials : [];
    castShadow = !!castShadow;
    // instanced = !!instanced;
    autoGenerateDepthMaterial = !!autoGenerateDepthMaterial;
    renderEnabled = !!renderEnabled;

    return {
        ...actor,
        meshType : meshType ?? MeshTypes.Default,
        // meshType,
        geometry,
        materials,
        depthMaterials,
        castShadow,
        // instanced,
        autoGenerateDepthMaterial,
        renderEnabled,
        // methods
        // start: startMesh,
    };
}
